type User @model @auth(rules: [{ allow: public }]) {
	#user info
	username: String! @primaryKey
	name: String!
	profilePicture: String
	bio: String
	publicPrivate: Visibility
	highlightColor: String

	#friend info
	friends: [String!]!
	friendRequests: [String!]!
	outgoingFriendRequests: [String!]!

	#group info
	groups: [Group!]! @manyToMany(relationName: "members")
	groupRequests: [Group!]! @manyToMany(relationName: "memberRequests")
	#groupAdmins: [Group!]! @manyToMany(relationName: "groupAdmins")
	groupOwners: [Group!]! @hasMany
	#quiz info
	quizOwners: [Quiz!]! @hasMany
	admin: Boolean! @default(value: "false")
	blocked: Boolean! @default(value: "false")
}


type Group @model @auth(rules: [{ allow: public }]) {
	#group info
	id: ID!
	name: String!
	profilePicture: String
	bio: String
	publicPrivate: Visibility
	highlightColor: String

	#member info
	members: [User!]! @manyToMany(relationName: "members")
	memberRequests: [User!]! @manyToMany(relationName: "memberRequests")
	owner: User! @belongsTo(fields: ["ownerUsername"])
	ownerUsername: String!

	#quiz info
	#quizOwners: [Quiz!]! @hasMany
}

type Quiz @model @auth(rules: [{ allow: public }]) {
	id: ID!
	quizname: String!
	owner: User! @belongsTo(fields: ["ownerUsername"])
	ownerUsername: String!
	description: String!
	#groups: [Group!] @manyToMany(relationName: "quizToGroup")
	#questions: [Question!] @hasMany(indexName: "questionToQuiz", fields: ["id"])
	#results: [Result!] @hasMany(indexName: "resultToQuiz", fields: ["id"])
	#topic: String
	#publicPrivate: Visibility
}

enum Visibility {
	public # all users
	private # only friends
	hidden # no users
}
